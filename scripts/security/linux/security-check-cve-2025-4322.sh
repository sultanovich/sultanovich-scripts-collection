#!/bin/bash
# File name: security-check-cve-2025-4322.sh
# Version: 1.2.0
# Last updated: 2025-07-01
# Copyright (C) 2025 sultanovich
#
# Changelog:
#   1.0.0 - 2025-07-01 - Initial functional version.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

###############################################################################
# security-check-cve-2025-4322.sh
#
# Description:
#   Checks for CVE-2025-4322 (Motors Theme critical vulnerability on WordPress).
#   If vulnerable, optionally attempts a safe PoC: change the admin password
#   (with prior confirmation). Uses wp-cli if available, or direct SQL as a last
#   resort.
#
# Usage:
#   sudo bash security-check-cve-2025-4322.sh [--verbose] [--try-exploit]
#
# Supported systems:
#   - Linux (with WordPress installations)
#
# The script must be run as root or with sufficient permissions to scan web directories.
###############################################################################

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

VERBOSE=0
TRY_EXPLOIT=0

show_help() {
  echo "Usage: sudo bash $0 [--verbose] [--try-exploit] [--help]"
  echo
  echo "Checks for CVE-2025-4322 (Motors Theme vulnerability in WordPress)."
  echo
  echo "Options:"
  echo "  --help         Show this help message and exit"
  echo "  --verbose      Enable detailed output"
  echo "  --try-exploit  Try to change the admin password (PoC, asks for confirmation)"
  exit 0
}

info()    { [ "$VERBOSE" -eq 1 ] && echo -e "${CYAN}[INFO]${RESET} $*"; }
ok()      { echo -e "${GREEN}[OK]${RESET} $*"; }
warn()    { echo -e "${YELLOW}[WARN]${RESET} $*"; }
fail()    { echo -e "${RED}[FAIL]${RESET} $*"; }
space()   { [ "$VERBOSE" -eq 1 ] && echo ""; }

for arg in "$@"; do
  case "$arg" in
    --help) show_help ;;
    --verbose) VERBOSE=1 ;;
    --try-exploit) TRY_EXPLOIT=1 ;;
    *) fail "Unknown argument: $arg"; show_help ;;
  esac
done

space
info "Checking for CVE-2025-4322 (Motors Theme - WordPress) ..."
space

WP_PATHS=$(find /var/www /srv/http /usr/share/nginx/html /home -type d -name wp-content 2>/dev/null)
VULN_FOUND=0

for WP_CONTENT in $WP_PATHS; do
  MOTORS_DIR="$WP_CONTENT/themes/motors"
  if [ -d "$MOTORS_DIR" ]; then
    THEME_VERSION_FILE="$MOTORS_DIR/style.css"
    if [ -f "$THEME_VERSION_FILE" ]; then
      VERSION=$(grep -i "Version:" "$THEME_VERSION_FILE" | head -n1 | awk -F: '{print $2}' | xargs)
      info "Found Motors theme in: $MOTORS_DIR (version: $VERSION)"
      PATCHED_VERSION="5.3.0"
      if [ "$(printf '%s\n' "$PATCHED_VERSION" "$VERSION" | sort -V | head -n1)" != "$PATCHED_VERSION" ]; then
        ok "Motors theme is patched (version $VERSION >= $PATCHED_VERSION)"
      else
        warn "VULNERABLE: Motors theme version $VERSION < $PATCHED_VERSION in $MOTORS_DIR"
        VULN_FOUND=1
        VULN_PATH="$MOTORS_DIR"
      fi
    else
      warn "Motors theme detected in $MOTORS_DIR, but version could not be determined."
    fi
  fi
done

if [ "$VULN_FOUND" -eq 0 ]; then
  ok "No vulnerable Motors theme installations detected."
  exit 0
fi

# PoC: Attempt to change the admin password
if [ "$TRY_EXPLOIT" -eq 1 ]; then
  read -p "Attempt to change password of 'admin' user? [y/N]: " CONFIRM
  if [[ "$CONFIRM" =~ ^[yYsS]$ ]]; then
    WP_ROOT="$(dirname "$(dirname "$VULN_PATH")")"
    WP_CONFIG="$WP_ROOT/wp-config.php"

    if [ ! -f "$WP_CONFIG" ]; then
      fail "wp-config.php not found in $WP_ROOT. Cannot continue."
      exit 1
    fi

    # Extract DB credentials
    DB_NAME=$(grep DB_NAME "$WP_CONFIG" | awk -F"'" '{print $4}')
    DB_USER=$(grep DB_USER "$WP_CONFIG" | awk -F"'" '{print $4}')
    DB_PASS=$(grep DB_PASSWORD "$WP_CONFIG" | awk -F"'" '{print $4}')
    DB_HOST=$(grep DB_HOST "$WP_CONFIG" | awk -F"'" '{print $4}')

    NEW_PASS="Motors4322Test"

    if command -v wp >/dev/null 2>&1; then
      USER_EXISTS=$(wp user get admin --field=user_login --path="$WP_ROOT" --allow-root 2>/dev/null)
      if [ "$USER_EXISTS" != "admin" ]; then
        fail "User 'admin' does not exist in this installation."
        exit 1
      fi
      wp user update admin --user_pass="$NEW_PASS" --path="$WP_ROOT" --allow-root \
        && ok "Password changed via wp-cli. New password: $NEW_PASS" \
        || fail "Failed to change password using wp-cli."
    else
      warn "'wp-cli' is not installed. Attempting SQL direct method..."

      # Try to detect table prefix
      TABLE_PREFIX=$(grep "table_prefix" "$WP_CONFIG" | grep -v '^#' | awk -F"'" '{print $2}')
      [ -z "$TABLE_PREFIX" ] && TABLE_PREFIX="wp_"

      # Check if admin user exists
      SQL_CHECK_USER="SELECT COUNT(*) FROM ${TABLE_PREFIX}users WHERE user_login='admin';"
      ADMIN_EXISTS=$(mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -N -e "$SQL_CHECK_USER" 2>/dev/null)
      if [ "$ADMIN_EXISTS" != "1" ]; then
        fail "User 'admin' does not exist in this installation (checked via SQL)."
        exit 1
      fi

      # Change password using SQL (WordPress MD5 hash, not recommended for production)
      SQL="UPDATE ${TABLE_PREFIX}users SET user_pass=MD5('$NEW_PASS') WHERE user_login='admin';"
      mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "$SQL" \
        && ok "Password changed via direct SQL (MD5 hash set!). New password: $NEW_PASS" \
        || fail "Failed to change password using SQL."
    fi
  else
    warn "PoC cancelled by user."
  fi
else
  warn "To try the password change PoC, run the script with --try-exploit"
fi

# Optional: If an official PoC is published, a curl to the vulnerable endpoint could be included here
# Example (commented):
# curl -s -X POST http://site.com/wp-admin/admin-ajax.php -d "action=motors_exploit" | grep "unauthorized"
