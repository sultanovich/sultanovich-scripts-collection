#!/bin/bash
# File name: security-check-cve-2025-6018-6019.sh
# Version: 1.1.1
# Last updated: 2025-06-21
# Copyright (C) 2025 sultanovich
#
# Changelog:
#   1.1.1 - 2025-06-21 - Show help if any unknown argument is provided.
#   1.1.0 - 2025-06-21 - Added --verbose, simplified default output, removed confirmation for safe PoC.
#   1.0.0 - 2025-06-21 - Initial release.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

###############################################################################
# security-check-cve-2025-6018-6019.sh
#
# Description:
#   Checks for CVE-2025-6018 (PAM module order) and CVE-2025-6019 (udisks2/
#   libblockdev unpatched) on Debian, Ubuntu, Red Hat, AlmaLinux, Amazon Linux,
#   Arch Linux and Linux Mint.
#
# Usage:
#   sudo bash security-check-cve-2025-6018-6019.sh [--verbose]
#
# Supported systems:
#   - Debian (and derivatives: Ubuntu, Linux Mint)
#   - Red Hat Enterprise Linux (and AlmaLinux)
#   - Amazon Linux
#   - Arch Linux
#
# The script must be run as root.
###############################################################################

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RESET='\033[0m'

VERBOSE=0

show_help() {
  echo "Usage: sudo bash $0 [--verbose] [--help]"
  echo
  echo "Checks for CVE-2025-6018 and CVE-2025-6019 vulnerabilities."
  echo
  echo "Supported systems:"
  echo "  Debian, Ubuntu, Linux Mint, Red Hat, AlmaLinux, Amazon Linux, Arch Linux"
  echo
  echo "Options:"
  echo "  --help        Show this help message and exit"
  echo "  --verbose     Enable detailed output"
  exit 0
}

info()    { [ "$VERBOSE" -eq 1 ] && echo -e "${CYAN}[INFO]${RESET} $*"; }
ok()      { [ "$VERBOSE" -eq 1 ] && echo -e "${GREEN}[OK]${RESET} $*"; }
warn()    { [ "$VERBOSE" -eq 1 ] && echo -e "${YELLOW}[WARN]${RESET} $*"; }
fail()    { [ "$VERBOSE" -eq 1 ] && echo -e "${RED}[FAIL]${RESET} $*"; }
space()    { [ "$VERBOSE" -eq 1 ] && echo -e " "; }

# Argument parsing with unknown check
for arg in "$@"; do
  case "$arg" in
    --help) show_help ;;
    --verbose) VERBOSE=1 ;;
    *) echo -e "${RED}ERROR:${RESET} Unknown argument: $arg"; show_help ;;
  esac
done

# Root permission check
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}ERROR:${RESET} This script must be run as root. Try: sudo $0"
  exit 1
fi

info "Checking for vulnerabilities CVE-2025-6018 and CVE-2025-6019"
info "--------------------------------------------------------------"

# Detect operating system
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
    VER=$VERSION_ID
else
    echo -e "${RED}ERROR:${RESET} Could not detect the operating system."
    exit 1
fi

is_debian() {
    [[ "$OS" == "debian" || "$OS" == "ubuntu" || "$OS" == "linuxmint" ]]
}

is_amazon() {
    [[ "$OS" == "amzn" || "$OS" == "amazon" ]]
}

is_rhel() {
    [[ "$OS" == "rhel" || "$OS" == "almalinux" ]]
}

is_arch() {
    [[ "$OS" == "arch" ]]
}

# --- CVE-2025-6018: pam_env before pam_systemd ---
space
info "[CVE-2025-6018] Checking order of pam_env and pam_systemd..."

VULN_PAM=0
FILES=$(grep -rl pam_env /etc/pam.d/ 2>/dev/null)

for f in $FILES; do
    ORDER=$(grep -E 'pam_(env|systemd)' "$f" | awk '{print $3}' | tr '\n' ',')
    if echo "$ORDER" | grep -q 'pam_env.*pam_systemd'; then
        warn "Possible vulnerability in: $f (order: pam_env before pam_systemd)"
        VULN_PAM=1
    fi
done

if [ "$VULN_PAM" -eq 0 ]; then
    ok "No vulnerable PAM configuration detected."
fi

# --- CVE-2025-6019: udisks2/libblockdev unpatched ---
space
info "[CVE-2025-6019] Checking versions of libblockdev and udisks2..."

get_version() {
    pkg="$1"
    if command -v dpkg >/dev/null 2>&1; then
        dpkg -s "$pkg" 2>/dev/null | grep '^Version:' | awk '{print $2}'
    elif command -v rpm >/dev/null 2>&1; then
        rpm -q --qf "%{VERSION}-%{RELEASE}\n" "$pkg" 2>/dev/null
    elif command -v pacman >/dev/null 2>&1; then
        pacman -Qi "$pkg" 2>/dev/null | grep Version | awk '{print $3}'
    fi
}

VULN_UDISKS=0

if is_debian; then
    ver_blockdev=$(get_version libblockdev)
    ver_udisks=$(get_version udisks2)
    info "libblockdev: $ver_blockdev"
    info "udisks2:     $ver_udisks"

    if [[ -n "$ver_blockdev" ]] && dpkg --compare-versions "$ver_blockdev" lt "2.25-2+deb11u1"; then
        warn "libblockdev is outdated on Debian. Vulnerable."
        VULN_UDISKS=1
    fi
elif is_amazon || is_rhel; then
    ver_blockdev=$(get_version libblockdev)
    ver_udisks=$(get_version udisks2)
    info "libblockdev: $ver_blockdev"
    info "udisks2:     $ver_udisks"

    if command -v rpm >/dev/null 2>&1; then
      if ! rpm -q --changelog libblockdev | grep -q "CVE-2025-6019"; then
          warn "No evidence of patch for CVE-2025-6019 in libblockdev (RPM-based system)."
          VULN_UDISKS=1
      else
          ok "libblockdev appears to be patched."
      fi
    fi
elif is_arch; then
    ver_blockdev=$(get_version libblockdev)
    ver_udisks=$(get_version udisks2)
    info "libblockdev: $ver_blockdev"
    info "udisks2:     $ver_udisks"
    # No official patch/version available for Arch as of now
    warn "Please check the Arch Security Tracker for patch status."
    VULN_UDISKS=1
else
    warn "System not recognized for libblockdev check."
fi

# --- Main summary output (default is simple) ---
echo
echo -n "CVE-2025-6018: "
if [ "$VULN_PAM" -eq 1 ]; then
    echo -e "${RED}vulnerable${RESET}"
else
    echo -e "${GREEN}not vulnerable${RESET}"
fi

echo -n "CVE-2025-6019: "
if [ "$VULN_UDISKS" -eq 1 ]; then
    echo -e "${RED}vulnerable${RESET}"
else
    echo -e "${GREEN}not vulnerable${RESET}"
fi
echo

# --- Optional: Safe Exploitation Test (No confirmation needed) ---
if [ "$VERBOSE" -eq 1 ]; then
    info "Running safe exploitation test for these vulnerabilities..."
    info "--------------------------------------------------------------"

    # --- CVE-2025-6018 PoC (SAFE variant): Simulate PAM configuration order ---
    space
    info "[PoC] CVE-2025-6018: Simulating PAM order check with a test file..."
    TEST_PAM="/tmp/pam_test_cve6018"
    echo -e "auth\trequired\tpam_env.so\nauth\trequired\tpam_systemd.so" > "$TEST_PAM"
    ORDER=$(grep -E 'pam_(env|systemd)' "$TEST_PAM" | awk '{print $3}' | tr '\n' ',')
    if echo "$ORDER" | grep -q 'pam_env.*pam_systemd'; then
        warn "Order pam_env before pam_systemd detected in test file: $TEST_PAM"
        warn "This would be vulnerable in a real PAM configuration."
    fi
    rm -f "$TEST_PAM"

    # --- CVE-2025-6019 PoC (SAFE variant): Check if vulnerable version is running ---
    space
    info "[PoC] CVE-2025-6019: Attempting to use vulnerable libblockdev..."
    if is_debian || is_amazon || is_rhel || is_arch; then
        if [ "$VULN_UDISKS" -eq 1 ]; then
            warn "System appears vulnerable. For a real exploit, an attacker could leverage udisks2/libblockdev."
            info "No destructive test will be run. Please consult trusted advisories for PoC."
        else
            ok "System appears patched. No exploit possible."
        fi
    else
        warn "PoC for this platform is not implemented."
    fi
fi